// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  address      String?
  password      String
  loans         Loan[]
  roles         Role[]
  permissions   Permission[]
  visible       Boolean  @default(true)
  createdAt     DateTime @default(now())

  @@map("users")
}

model Permission {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  roles         Role[]
  users         User[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("permissions")
}

model Role {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  permissions   Permission[]
  users         User[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("roles")
}

// Um autor pode ter no minimo um livro e no maximo varios livros
model Author {
  id            String   @id @default(uuid())
  name          String   @unique
  biography     String?
  books         Book[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("authors")
}

model Publisher {
  id            String   @id @default(uuid())
  name          String   @unique
  address       String?
  books         Book[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("publishers")
}

model Category {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  books         Book[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("categories")
}

model Employee {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  telephone     String?
  address       String?
  loans         Loan[]
  visible       Boolean  @default(true)
  createdAt     DateTime @default(now())

  @@map("employees")
}

// Um livro pode ter vários autores e um autor pode ter vários livros
model Book {
  id            String   @id @default(uuid())
  title         String
  description   String?
  isbn          String  @unique
  year          Int
  publisherId   String
  publisher     Publisher @relation(fields: [publisherId], references: [id])
  loanTypeId    String
  loanType      loanType @relation(fields: [loanTypeId], references: [id])
  authors       Author[]
  categories    Category[]
  loans         Loan[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("books")
}

model Loan {
  id            String   @id @default(uuid())
  loanDate      DateTime @default(now())
  dueDate       DateTime // data de devolução
  returnDate    DateTime? // data que o livro foi devolvido
  fees          Float    @default(0) // multa
  returned      Boolean  @default(false)
  condition     String?
  paymethod     String?
  userId        String
  user          User @relation(fields: [userId], references: [id])
  bookId        String
  book          Book @relation(fields: [bookId], references: [id])
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  visible       Boolean  @default(true)

  @@map("loans")
}
model loanType{
  id            String   @id @default(uuid())
  name          String   @unique
  fine         Float
  day          Int
  description   String?
  books         Book[]
  createdAt     DateTime @default(now())
  visible       Boolean  @default(true)

  @@map("loanTypes")
}